import { ref, get, set, runTransaction } from "firebase/database";
import { database } from "./config";
import { getAnonymousUser } from "./auth";
import type { ParticipantData, SorteioResult } from "../../types";
import { generateRedeemCode } from "../utils";

/**
 * @function handleSorteio
 * @description Processa a participa√ß√£o de um usu√°rio no sorteio, verificando se ele j√° jogou e determinando se ganhou um pr√™mio.
 * @returns {Promise<SorteioResult>} O resultado do sorteio.
 */
export const handleSorteio = async (): Promise<SorteioResult> => {
  const user = await getAnonymousUser();
  if (!user) throw new Error("Autentica√ß√£o an√¥nima falhou.");

  const participantRef = ref(database, `participants/${user.uid}`);
  const prizesRef = ref(database, "prizes");

  const snapshot = await get(participantRef);
  if (snapshot.exists()) {
    const participantData = snapshot.val() as ParticipantData;
    
    // Se j√° participou e ganhou
    if (participantData.wonPrize && participantData.redeemCode) {
      // Se j√° resgatou o pr√™mio
      if (participantData.redeemed) {
        return {
          won: true,
          message: "Voc√™ j√° resgatou seu pr√™mio anteriormente!",
          alreadyPlayed: true,
          redeemed: true,
          redeemCode: participantData.redeemCode,
        };
      }
      // Se ganhou mas ainda n√£o resgatou
      return {
        won: true,
        message: "Voc√™ j√° participou e GANHOU! Aqui est√° seu c√≥digo novamente.",
        alreadyPlayed: true,
        redeemed: false,
        redeemCode: participantData.redeemCode,
      };
    }
    
    // Se j√° participou mas n√£o ganhou
    return {
      won: false,
      message: "Voc√™ j√° participou do sorteio anteriormente!",
      alreadyPlayed: true,
    };
  }

  let result: SorteioResult = {
    won: false,
    message:
      "N√£o foi desta vez, mas obrigado por participar! Continue atento √†s dicas de seguran√ßa.",
    alreadyPlayed: false,
  };
  let wonPrize = false;
  let redeemCode = "";

  await runTransaction(prizesRef, (currentData) => {
    if (currentData === null) return { remaining: 30 }; // Valor inicial de pr√™mios
    if (currentData.remaining > 0) {
      // 25% de chance de ganhar
      if (Math.random() <= 0.25) {
        currentData.remaining--;
        wonPrize = true;
        redeemCode = generateRedeemCode();
        result = {
          won: true,
          message:
            "VOC√ä GANHOU um delicioso Sonho de Valsa! üç´ Use o c√≥digo abaixo para resgatar seu pr√™mio.",
          alreadyPlayed: false,
          redeemCode,
        };
      }
    } else {
      result.message =
        "Os pr√™mios acabaram, mas voc√™ ganhou conhecimento sobre seguran√ßa digital!";
    }
    return currentData;
  });

  // Registra a participa√ß√£o do usu√°rio para evitar m√∫ltiplas tentativas
  const participantData: ParticipantData = {
    playedAt: new Date().toISOString(),
    wonPrize,
  };
  if (wonPrize) {
    participantData.redeemCode = redeemCode;
    participantData.redeemed = false;
  }
  await set(participantRef, participantData);
  return result;
};
